// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk', 'flutter_sdk'], (function load__zapp_user_main(dart_sdk, flutter_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const app = flutter_sdk.src__material__app;
  const theme_data = flutter_sdk.src__material__theme_data;
  const colors = flutter_sdk.src__material__colors;
  const framework = flutter_sdk.src__widgets__framework;
  const text = flutter_sdk.src__widgets__text;
  const text_style = flutter_sdk.src__painting__text_style;
  const list_tile = flutter_sdk.src__material__list_tile;
  const radio = flutter_sdk.src__material__radio;
  const scaffold = flutter_sdk.src__material__scaffold;
  const app_bar = flutter_sdk.src__material__app_bar;
  const basic = flutter_sdk.src__widgets__basic;
  const edge_insets = flutter_sdk.src__painting__edge_insets;
  const container = flutter_sdk.src__widgets__container;
  const alignment = flutter_sdk.src__painting__alignment;
  const flex = flutter_sdk.src__rendering__flex;
  const elevated_button = flutter_sdk.src__material__elevated_button;
  const binding = flutter_sdk.src__widgets__binding;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var $toString = dartx.toString;
  var $_get = dartx._get;
  var $length = dartx.length;
  var $add = dartx.add;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T.ListOfString()])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    JSArrayOfQuestion: () => (T.JSArrayOfQuestion = dart.constFn(_interceptors.JSArray$(main.Question)))(),
    JSArrayOfWidget: () => (T.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    RadioOfObject: () => (T.RadioOfObject = dart.constFn(radio.Radio$(core.Object)))(),
    ObjectN: () => (T.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    ObjectNTovoid: () => (T.ObjectNTovoid = dart.constFn(dart.fnType(dart.void, [T.ObjectN()])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T.VoidTovoid());
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "Prova"
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 16,
        [EdgeInsets_right]: 16,
        [EdgeInsets_top]: 16,
        [EdgeInsets_left]: 16
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "Mostrar selecionados"
      });
    }
  }, false);
  var C = Array(4).fill(void 0);
  var I = ["file:///zapp/project/lib/main.dart"];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T.ListOfStringTodynamic().as(C[0] || CT.C0)(T.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T.dynamicToNull()));
      }
    }, T.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[$toString](), stackTrace.toString()]);
      }
    }, T.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T.VoidToNull())});
    });
  };
  main.MyApp = class MyApp extends framework.StatelessWidget {
    build(context) {
      return new app.MaterialApp.new({title: "Prova", debugShowCheckedModeBanner: false, theme: theme_data.ThemeData.new({primarySwatch: colors.Colors.blue}), home: new main.Forms.new()});
    }
    static ['_#new#tearOff']() {
      return new main.MyApp.new();
    }
  };
  (main.MyApp.new = function() {
    main.MyApp.__proto__.new.call(this);
    ;
  }).prototype = main.MyApp.prototype;
  dart.addTypeTests(main.MyApp);
  dart.addTypeCaches(main.MyApp);
  dart.setMethodSignature(main.MyApp, () => ({
    __proto__: dart.getMethods(main.MyApp.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.MyApp, I[0]);
  main.Forms = class Forms extends framework.StatefulWidget {
    createState() {
      return new main.FormsState.new();
    }
    static ['_#new#tearOff']() {
      return new main.Forms.new();
    }
  };
  (main.Forms.new = function() {
    main.Forms.__proto__.new.call(this);
    ;
  }).prototype = main.Forms.prototype;
  dart.addTypeTests(main.Forms);
  dart.addTypeCaches(main.Forms);
  dart.setMethodSignature(main.Forms, () => ({
    __proto__: dart.getMethods(main.Forms.__proto__),
    createState: dart.fnType(main.FormsState, [])
  }));
  dart.setLibraryUri(main.Forms, I[0]);
  var questions = dart.privateName(main, "FormsState.questions");
  var _result = dart.privateName(main, "_result");
  var _buildRadioButtons = dart.privateName(main, "_buildRadioButtons");
  var Widget_key = dart.privateName(framework, "Widget.key");
  var Text_selectionColor = dart.privateName(text, "Text.selectionColor");
  var Text_textHeightBehavior = dart.privateName(text, "Text.textHeightBehavior");
  var Text_textWidthBasis = dart.privateName(text, "Text.textWidthBasis");
  var Text_semanticsLabel = dart.privateName(text, "Text.semanticsLabel");
  var Text_maxLines = dart.privateName(text, "Text.maxLines");
  var Text_textScaleFactor = dart.privateName(text, "Text.textScaleFactor");
  var Text_overflow = dart.privateName(text, "Text.overflow");
  var Text_softWrap = dart.privateName(text, "Text.softWrap");
  var Text_locale = dart.privateName(text, "Text.locale");
  var Text_textDirection = dart.privateName(text, "Text.textDirection");
  var Text_textAlign = dart.privateName(text, "Text.textAlign");
  var Text_strutStyle = dart.privateName(text, "Text.strutStyle");
  var Text_style = dart.privateName(text, "Text.style");
  var Text_textSpan = dart.privateName(text, "Text.textSpan");
  var Text_data = dart.privateName(text, "Text.data");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  main.FormsState = class FormsState extends framework.State$(main.Forms) {
    get questions() {
      return this[questions];
    }
    set questions(value) {
      super.questions = value;
    }
    changeResult(result) {
      this.setState(dart.fn(() => {
        result != null ? this[_result] = "Responda a questÃ£o " + dart.notNull(result) : this[_result] = "";
      }, T.VoidTovoid()));
    }
    changeColor(questionIndex, color) {
      this.setState(dart.fn(() => {
        this.questions[$_get](questionIndex).color = color;
      }, T.VoidTovoid()));
    }
    showResponse() {
      for (let question of this.questions) {
        if (question.userAnswer == null) {
          this.changeResult(question.label);
          return;
        }
      }
      this.changeResult(null);
      for (let index = 0; index < this.questions[$length]; index = index + 1) {
        let question = this.questions[$_get](index);
        if (dart.equals(question.userAnswer, question.rightAnswer)) {
          this.changeColor(index, main.FormsState.correctColor);
        } else {
          this.changeColor(index, main.FormsState.errorColor);
        }
      }
    }
    [_buildRadioButtons]() {
      let radioButtons = T.JSArrayOfWidget().of([]);
      for (let question of this.questions) {
        radioButtons[$add](new text.Text.new(question.label, {style: new text_style.TextStyle.new({fontSize: 16, color: question.color})}));
        for (let option of question.options) {
          radioButtons[$add](new list_tile.ListTile.new({title: new text.Text.new(option, {style: new text_style.TextStyle.new({color: question.color})}), leading: new (T.RadioOfObject()).new({value: option, groupValue: question.userAnswer, onChanged: dart.fn(newValue => {
                this.setState(dart.fn(() => {
                  question.userAnswer = newValue;
                }, T.VoidTovoid()));
              }, T.ObjectNTovoid())})}));
        }
      }
      return radioButtons;
    }
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: C[1] || CT.C1}), body: new basic.Padding.new({padding: C[2] || CT.C2, child: new container.Container.new({alignment: alignment.Alignment.topLeft, child: new basic.Column.new({mainAxisSize: flex.MainAxisSize.min, children: T.JSArrayOfWidget().of([new basic.Column.new({crossAxisAlignment: flex.CrossAxisAlignment.start, children: this[_buildRadioButtons]()}), new text.Text.new(this[_result], {style: new text_style.TextStyle.new({color: colors.Colors.red})}), new basic.SizedBox.new({height: 16}), new elevated_button.ElevatedButton.new({onPressed: dart.fn(() => {
                    this.showResponse();
                  }, T.VoidTovoid()), child: C[3] || CT.C3})])})})})});
    }
    static ['_#new#tearOff']() {
      return new main.FormsState.new();
    }
  };
  (main.FormsState.new = function() {
    this[_result] = "";
    this[questions] = T.JSArrayOfQuestion().of([new main.Question.new({label: "1) Qual foi o primeiro pokemon de Ash?", options: T.JSArrayOfString().of(["Pidioto", "Caterpie", "Pikachu"]), rightAnswer: "Pikachu", color: main.FormsState.correctColor}), new main.Question.new({label: "2) Qual foi o primeiro pokemon capturado por Ash na primeira versÃ£o?", options: T.JSArrayOfString().of(["Caterpie", "Pikachu", "Scorbunny"]), rightAnswer: "Caterpie", color: main.FormsState.correctColor}), new main.Question.new({label: "3) Como se chama a evoluÃ§Ã£o do pokemon Scorbunny?", options: T.JSArrayOfString().of(["Firebanny", "Rabito", "Raboot"]), rightAnswer: "Raboot", color: main.FormsState.correctColor}), new main.Question.new({label: "4) Qual o primeiro pokemon da pokdex?", options: T.JSArrayOfString().of(["Bulbasauro", "Charmander", "Pikachu"]), rightAnswer: "Bulbasauro", color: main.FormsState.correctColor}), new main.Question.new({label: "5) Qual o pokemon que originou todos os outros?", options: T.JSArrayOfString().of(["Mewtwo", "Arceus", "Mew"]), rightAnswer: "Arceus", color: main.FormsState.correctColor})]);
    main.FormsState.__proto__.new.call(this);
    ;
  }).prototype = main.FormsState.prototype;
  dart.addTypeTests(main.FormsState);
  dart.addTypeCaches(main.FormsState);
  dart.setMethodSignature(main.FormsState, () => ({
    __proto__: dart.getMethods(main.FormsState.__proto__),
    changeResult: dart.fnType(dart.void, [dart.nullable(core.String)]),
    changeColor: dart.fnType(dart.void, [core.int, ui.Color]),
    showResponse: dart.fnType(dart.void, []),
    [_buildRadioButtons]: dart.fnType(core.List$(framework.Widget), []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.FormsState, I[0]);
  dart.setFieldSignature(main.FormsState, () => ({
    __proto__: dart.getFields(main.FormsState.__proto__),
    [_result]: dart.fieldType(core.String),
    questions: dart.finalFieldType(core.List$(main.Question))
  }));
  dart.setStaticFieldSignature(main.FormsState, () => ['correctColor', 'errorColor']);
  dart.defineLazy(main.FormsState, {
    /*main.FormsState.correctColor*/get correctColor() {
      return colors.Colors.black;
    },
    set correctColor(value) {},
    /*main.FormsState.errorColor*/get errorColor() {
      return colors.Colors.red;
    },
    set errorColor(value) {}
  }, false);
  var label$ = dart.privateName(main, "Question.label");
  var rightAnswer$ = dart.privateName(main, "Question.rightAnswer");
  var options$ = dart.privateName(main, "Question.options");
  var color$ = dart.privateName(main, "Question.color");
  var userAnswer$ = dart.privateName(main, "Question.userAnswer");
  main.Question = class Question extends core.Object {
    get label() {
      return this[label$];
    }
    set label(value) {
      super.label = value;
    }
    get rightAnswer() {
      return this[rightAnswer$];
    }
    set rightAnswer(value) {
      super.rightAnswer = value;
    }
    get options() {
      return this[options$];
    }
    set options(value) {
      super.options = value;
    }
    get color() {
      return this[color$];
    }
    set color(value) {
      this[color$] = value;
    }
    get userAnswer() {
      return this[userAnswer$];
    }
    set userAnswer(value) {
      this[userAnswer$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let label = opts && 'label' in opts ? opts.label : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let rightAnswer = opts && 'rightAnswer' in opts ? opts.rightAnswer : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let userAnswer = opts && 'userAnswer' in opts ? opts.userAnswer : null;
      return new main.Question.new({key: key, label: label, options: options, rightAnswer: rightAnswer, color: color, userAnswer: userAnswer});
    }
  };
  (main.Question.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let label = opts && 'label' in opts ? opts.label : null;
    let options = opts && 'options' in opts ? opts.options : null;
    let rightAnswer = opts && 'rightAnswer' in opts ? opts.rightAnswer : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let userAnswer = opts && 'userAnswer' in opts ? opts.userAnswer : null;
    this[userAnswer$] = null;
    this[label$] = label;
    this[options$] = options;
    this[rightAnswer$] = rightAnswer;
    this[color$] = color;
    ;
  }).prototype = main.Question.prototype;
  dart.addTypeTests(main.Question);
  dart.addTypeCaches(main.Question);
  dart.setLibraryUri(main.Question, I[0]);
  dart.setFieldSignature(main.Question, () => ({
    __proto__: dart.getFields(main.Question.__proto__),
    label: dart.finalFieldType(core.String),
    rightAnswer: dart.finalFieldType(core.String),
    options: dart.finalFieldType(core.List$(core.String)),
    color: dart.fieldType(ui.Color),
    userAnswer: dart.fieldType(dart.nullable(core.Object))
  }));
  main.main = function main$0() {
    binding.runApp(new main.MyApp.new());
  };
  web_plugin_registrant.registerPlugins = function registerPlugins() {
  };
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart"],"names":[],"mappings":"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","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant
  };
}));

//# sourceMappingURL=main.js.map
